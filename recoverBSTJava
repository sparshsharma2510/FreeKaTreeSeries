/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    private TreeNode getPointerPositions(TreeNode curr, TreeNode prev, TreeNode[] invalidNodes){
        if(curr == null)
            return prev;
        if(curr.left != null)
            prev = getPointerPositions(curr.left, prev, invalidNodes);
        
        //The main Business goes here
        
        //if prev is not null and our current value is less than 
        //the previous (inorder predecessor) value, then 
        //we just found a violation
        if(prev != null && curr.val < prev.val){
            //if invalidNodes[0] is null i.e first is null, its our first violation
            //so we set middle and first pointers
            if(invalidNodes[0] == null){    
                invalidNodes[0] = prev;
                invalidNodes[1] = curr;
            }
            else    //else its our second violation so we set our last pointer i.e invalidNodes[2]
                invalidNodes[2] = curr;
        }
        //set prev to current node
        prev = curr;
        
        if(curr.right != null)
            prev = getPointerPositions(curr.right, prev, invalidNodes);
        return prev;
    }
    
    public void recoverTree(TreeNode root) {
        //Create an array of node pointers [first, middle, last] and intialise them to null
        TreeNode[] invalidNodes = {null,null,null};
        
        getPointerPositions(root, null,invalidNodes);
        
        //CODE TO SWAP THE POINTER VALS
        if(invalidNodes[2] == null){
            int temp = invalidNodes[0].val;
            invalidNodes[0].val = invalidNodes[1].val;
            invalidNodes[1].val = temp;
        }
        else{
            int temp = invalidNodes[0].val;
            invalidNodes[0].val = invalidNodes[2].val;
            invalidNodes[2].val = temp;
        }
    }
   
}
